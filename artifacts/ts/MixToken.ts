/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as MixTokenContractJson } from "../MixToken.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace MixTokenTypes {
  export type Fields = {
    symbol: HexString;
    name: HexString;
    decimals: bigint;
    supply: bigint;
    balance: bigint;
    atloti: Address;
    o: Address;
    baek: Address;
  };

  export type State = ContractState<Fields>;

  export type WithdrawEvent = ContractEvent<{ to: Address; amount: bigint }>;
  export type BurnEvent = ContractEvent<{ amount: bigint }>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    balance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<MixTokenInstance, MixTokenTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as MixTokenTypes.Fields;
  }

  eventIndex = { Withdraw: 0, Burn: 1 };
  consts = { ErrorCodes: { InvalidCaller: BigInt(1) } };

  at(address: string): MixTokenInstance {
    return new MixTokenInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<TestContractParams<MixTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getSymbol", params);
    },
    getName: async (
      params: Omit<TestContractParams<MixTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getName", params);
    },
    getDecimals: async (
      params: Omit<TestContractParams<MixTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: Omit<TestContractParams<MixTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTotalSupply", params);
    },
    balance: async (
      params: Omit<TestContractParams<MixTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "balance", params);
    },
    withdrawdev: async (
      params: TestContractParams<MixTokenTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdrawdev", params);
    },
    withdrawo: async (
      params: TestContractParams<MixTokenTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdrawo", params);
    },
    withdrawbaek: async (
      params: TestContractParams<MixTokenTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdrawbaek", params);
    },
    burntokenincontract: async (
      params: TestContractParams<MixTokenTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "burntokenincontract", params);
    },
  };
}

// Use this object to test and deploy the contract
export const MixToken = new Factory(
  Contract.fromJson(
    MixTokenContractJson,
    "=20-4=1-1+9=2-1=1+5=2-2+e140fd=101+3a0007e02=1+75468652063757272656e742062616c616e63652069732000=61+3a0007e02=1+75468652063757272656e742062616c616e63652069732000=61+3a0007e02=1+75468652063757272656e742062616c616e63652069732000=106",
    "cb87ab92503bfe7e8d3a12d8d015de6cc614933954c47d9076cee8f418f06101"
  )
);

// Use this class to interact with the blockchain
export class MixTokenInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MixTokenTypes.State> {
    return fetchContractState(MixToken, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeWithdrawEvent(
    options: EventSubscribeOptions<MixTokenTypes.WithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MixToken.contract,
      this,
      options,
      "Withdraw",
      fromCount
    );
  }

  subscribeBurnEvent(
    options: EventSubscribeOptions<MixTokenTypes.BurnEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MixToken.contract,
      this,
      options,
      "Burn",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      MixTokenTypes.WithdrawEvent | MixTokenTypes.BurnEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(MixToken.contract, this, options, fromCount);
  }

  methods = {
    getSymbol: async (
      params?: MixTokenTypes.CallMethodParams<"getSymbol">
    ): Promise<MixTokenTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        MixToken,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: MixTokenTypes.CallMethodParams<"getName">
    ): Promise<MixTokenTypes.CallMethodResult<"getName">> => {
      return callMethod(
        MixToken,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: MixTokenTypes.CallMethodParams<"getDecimals">
    ): Promise<MixTokenTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        MixToken,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: MixTokenTypes.CallMethodParams<"getTotalSupply">
    ): Promise<MixTokenTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        MixToken,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    balance: async (
      params?: MixTokenTypes.CallMethodParams<"balance">
    ): Promise<MixTokenTypes.CallMethodResult<"balance">> => {
      return callMethod(
        MixToken,
        this,
        "balance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends MixTokenTypes.MultiCallParams>(
    calls: Calls
  ): Promise<MixTokenTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      MixToken,
      this,
      calls,
      getContractByCodeHash
    )) as MixTokenTypes.MultiCallResults<Calls>;
  }
}
