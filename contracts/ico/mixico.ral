// MIX ICO Presale

Contract Mixico (
    tokenId: ByteVec,                  // MIX Token
    mut balance: U256,                 // MIX Balance
    mut alphbalance: U256,             // ALPH Balance
    pricemix: U256,
    owner: Address                     // Contract Owner   // Can Withdraw  
) {

    event Sell(from: Address, amount: U256, balmix: U256)
    event Buy(to: Address, amount: U256, balalph: U256, balmix: U256)
    event WithdrawAlph(to: Address)
    event Destory(who: Address)

    enum ErrorCodes {
        InvalidCaller = 3
    }

    pub fn getTokenId() -> ByteVec {
        return tokenId
    }

    pub fn getPrice() -> U256 {
        return pricemix
    }

    pub fn getAlphBalance() -> U256 {
        return alphbalance
    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn buymix(amount: U256) -> () {

        // 4 months 1718119959000

        // 8 months 1728660869000

        // 12 months 1739288138000

        let finalcost = amount * pricemix

        transferToken!(callerAddress!(), selfAddress!(), ALPH, finalcost)                                         // Get Payment

        transferToken!(selfAddress!(), callerAddress!(), getTokenId(), amount)                                    // Send Tokens 

        alphbalance = alphbalance + finalcost

        balance = balance - amount

        emit Buy(callerAddress!(), amount, alphbalance, balance)
    }

    @using(assetsInContract = true, updateFields = true, checkExternalCaller = false, preapprovedAssets = true)
    pub fn addmix(amount: U256) -> () {

        let caller = callerAddress!()

        balance = balance + amount

        transferToken!(caller, selfAddress!(), getTokenId(), amount)

        emit Sell(caller, amount, amount)
    }

    @using(assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn removealph() -> () {
        
        let caller = callerAddress!()

        assert!(caller == owner, ErrorCodes.InvalidCaller)

        transferTokenFromSelf!(owner, ALPH, alphbalance)

        alphbalance = alphbalance - alphbalance

        emit WithdrawAlph(caller)
    }

    @using(assetsInContract = true, checkExternalCaller = false)
    pub fn destroycontract() -> () {
        
        let caller = callerAddress!()

        assert!(caller == owner, ErrorCodes.InvalidCaller)

        destroySelf!(owner)

        emit Destory(caller)
    }
}